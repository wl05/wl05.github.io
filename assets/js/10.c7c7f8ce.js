(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{520:function(s,a,t){s.exports=t.p+"assets/img/docker-logo.2103c445.png"},521:function(s,a,t){s.exports=t.p+"assets/img/docker-vm.92a53412.jpeg"},522:function(s,a,t){s.exports=t.p+"assets/img/docker-architecture.b595b80b.svg"},523:function(s,a,t){s.exports=t.p+"assets/img/docker-hello-world.689ae47b.png"},580:function(s,a,t){"use strict";t.r(a);var e=t(14),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"docker-浅尝辄止"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-浅尝辄止"}},[s._v("#")]),s._v(" Docker 浅尝辄止")]),s._v(" "),e("p",[s._v("Docker是什么，如何使用Docker，本文结合Docker实践来带着大家了解Docker走入Dokcer的世界。")]),s._v(" "),e("h2",{attrs:{id:"docker是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker是什么"}},[s._v("#")]),s._v(" Docker是什么")]),s._v(" "),e("h3",{attrs:{id:"docker概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker概念"}},[s._v("#")]),s._v(" Docker概念")]),s._v(" "),e("p",[e("img",{attrs:{src:t(520),alt:"docker-logo"}})]),s._v(" "),e("p",[s._v("Docker的logo非常形象的表现了Docker的思想，一艘大船载满各种各样的集装箱。\n集装箱解决了什么问题？\n船上的货物各种各样，集装箱将各种货物分门别类并且集装箱与集装箱之间互不影响。\n这样就不用担心哪些货物不能一起运送的问题。\n只要这些货物封装在不同的集装箱里，就可以用一艘大船把它们都运走。")]),s._v(" "),e("p",[s._v("回到实际运用中来，服务器就像是一艘大船，Docker就是集装箱。\n不同的应用程序会有不同的运行环境依赖，我们把这些环境依赖打包进不同的Docker容器中，容器与容器之间独立存在，互不影响。")]),s._v(" "),e("p",[s._v("说到环境隔离这里不得不提到虚拟机技术。虚拟机技术同样可以实现隔离，那它与docker有什么区别呢？")]),s._v(" "),e("p",[e("img",{attrs:{src:t(521),alt:"docker-vm"}})]),s._v(" "),e("p",[s._v("这里对比两者之间的差异，虚拟机通过在操作系统上建立了一个中间虚拟软件层 Hypervisor ，并利用物理机器的资源虚拟出多个虚拟硬件环境来共享宿主机的资源，其中的应用运行在虚拟机内核上。\n虚拟机的一个缺点在于Guest OS通常会占用不少硬件资源。\n就算不运行任何应用程序也需要占用一定的内存和硬盘空间，而且为了运行程序的性能，往往还要给每台虚拟机预留出一些内存空间以供消耗。")]),s._v(" "),e("p",[s._v("相比于虚拟机，Docker省去了虚拟机操作系统（Guest OS），Docker守护进程可以直接与主操作系统进行通信，Docker会直接使用宿主机的硬件资源，为各个Docker容器分配资源，从而节省了一部分的系统资源。")]),s._v(" "),e("p",[s._v("对比虚拟机Docker的优缺点：")]),s._v(" "),e("p",[e("strong",[s._v("优点：")])]),s._v(" "),e("ul",[e("li",[s._v("没有虚拟机硬件的初始化，没有Guest OS的启动过程，可以节约很多启动时间；")]),s._v(" "),e("li",[s._v("没有运行Guest OS所需的内存开销，无需为虚拟机预留运行内存，无需安装、运行App不需要的运行库/操作系统服务，内存占用、存储空间占用都小的多。")])]),s._v(" "),e("p",[e("strong",[s._v("缺点：")])]),s._v(" "),e("ul",[e("li",[s._v("应用之间的隔离不如虚拟机彻底，如果某个应用运行时导致宿主机内核崩溃，所有的容器都会崩溃。")])]),s._v(" "),e("h3",{attrs:{id:"docker-架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-架构"}},[s._v("#")]),s._v(" Docker 架构")]),s._v(" "),e("p",[e("img",{attrs:{src:t(522),alt:"docker-architecture"}})]),s._v(" "),e("p",[s._v("docker 采用客户端（client）服务器（docker deamon）架构，使用REST API进行通信。")]),s._v(" "),e("h4",{attrs:{id:"docker-镜像-docker-images"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像-docker-images"}},[s._v("#")]),s._v(" Docker 镜像（Docker images）")]),s._v(" "),e("p",[s._v("Docker镜像是创建Docker container的只读模版。")]),s._v(" "),e("h4",{attrs:{id:"docker-容器-docker-container"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器-docker-container"}},[s._v("#")]),s._v(" Docker 容器（Docker container）")]),s._v(" "),e("p",[s._v("container是镜像的可运行实例。")]),s._v(" "),e("h4",{attrs:{id:"docker守护进程-the-docker-da。emon"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker守护进程-the-docker-da。emon"}},[s._v("#")]),s._v(" Docker守护进程（The Docker da。emon）")]),s._v(" "),e("p",[s._v("Docker守护进程监听Docker Api请求，负责管理docker对象（images、containers、networks、volumes），构建、运行和分发Docker容器。")]),s._v(" "),e("h4",{attrs:{id:"docker客户端-the-docker-client"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker客户端-the-docker-client"}},[s._v("#")]),s._v(" Docker客户端（The Docker client）")]),s._v(" "),e("p",[s._v("用户通过Docker客户端与Docker守护进程进行交互，用户在命令行中输入Docker命令，Docker客户端将命令发送给Docker守护进程，Docker命令最终会调用Docker API。")]),s._v(" "),e("h4",{attrs:{id:"docker仓库-docker-registries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker仓库-docker-registries"}},[s._v("#")]),s._v(" Docker仓库（Docker registries）")]),s._v(" "),e("p",[s._v("Docker仓库存储Docker镜像，默认的仓库地址是"),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker Hub"),e("OutboundLink")],1),s._v("，可以配置自己的私有Docker仓库。")]),s._v(" "),e("h2",{attrs:{id:"如何使用docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何使用docker"}},[s._v("#")]),s._v(" 如何使用docker")]),s._v(" "),e("p",[s._v("docker如何安装这里就不讲解了，安装过程可以参考"),e("a",{attrs:{href:"https://docs.docker.com/get-started/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方文档"),e("OutboundLink")],1)]),s._v(" "),e("h3",{attrs:{id:"运行第一个docker-container"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行第一个docker-container"}},[s._v("#")]),s._v(" 运行第一个Docker container")]),s._v(" "),e("p",[s._v("运行一个hello world镜像")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker container run hello-world\n")])])]),e("p",[e("img",{attrs:{src:t(523),alt:"docker-hello-world"}})]),s._v(" "),e("p",[s._v("现在我们已经运行了我们的第一个Docker应用，就是这么简单，命令行还打印出生成这条信息Docker用了哪些步骤，这里简单分析一下:")]),s._v(" "),e("ol",[e("li",[s._v("首先Docker客户端与Docker守护进程建立通信。")]),s._v(" "),e("li",[s._v("Docker会在本地查找hello-world镜像，发现没有找到，此时docker会自动帮我们执行docker pull hello-world 从Docker Hub上拉取，将远程仓库的镜像拉取到本地")]),s._v(" "),e("li",[s._v("有了镜像以后Docker守护进程会自动帮我们执行docker container create命令来创建container，并且运行container")]),s._v(" "),e("li",[s._v("Docker守护进程将container的运行结果给到Docker客户端，客户端再发送到终端。")])]),s._v(" "),e("h3",{attrs:{id:"如何创建image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何创建image"}},[s._v("#")]),s._v(" 如何创建image")]),s._v(" "),e("p",[s._v("这里以官方文档中的"),e("a",{attrs:{href:"https://docs.docker.com/language/nodejs/build-images/",target:"_blank",rel:"noopener noreferrer"}},[s._v("demo"),e("OutboundLink")],1),s._v("讲解如何构建我们自己的镜像")]),s._v(" "),e("p",[s._v("首先我们需要创建自己的应用。")]),s._v(" "),e("ol",[e("li",[s._v("创建项目")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" node-docker "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" node-docker "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" init -y "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" ronin-server ronin-mocks "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" server.js\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("修改server.js")])]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" ronin     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ronin-server'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" mocks     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ronin-mocks'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" server "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ronin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("server")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("use")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mocks"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("server")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("Router")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("启动项目")])]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("$ node server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("js\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[s._v("测试一下是否运行正常")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" --request POST "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --url http://localhost:8000/test "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --header "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'content-type: application/json'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --data "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'{"msg": "testing" }\'')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"code"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"success"')]),s._v(","),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"payload"')]),s._v(":"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"msg"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"testing"')]),s._v(","),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"31f23305-f5d0-4b4f-a16f-6f4c8ec93cf1"')]),s._v(","),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"createDate"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2020-08-28T21:53:07.157Z"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://localhost:8000/test\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"code"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"success"')]),s._v(","),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"meta"')]),s._v(":"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"total"')]),s._v(":1,"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"count"')]),s._v(":1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(","),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"payload"')]),s._v(":"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"msg"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"testing"')]),s._v(","),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"31f23305-f5d0-4b4f-a16f-6f4c8ec93cf1"')]),s._v(","),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"createDate"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2020-08-28T21:53:07.157Z"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),e("p",[s._v("输出日志：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2021")]),s._v("-05-30T17:39:41:1940  INFO: POST /notes\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2021")]),s._v("-05-30T17:40:28:8770  INFO: GET /notes\n")])])]),e("p",[s._v("说明一切运行正常。")]),s._v(" "),e("p",[s._v("现在我们可以开始动手将我们的应用build成一个docker镜像了。")]),s._v(" "),e("h4",{attrs:{id:"创建dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建dockerfile"}},[s._v("#")]),s._v(" 创建Dockerfile")]),s._v(" "),e("p",[s._v("在项目根目录下创建Dockerfile文件，")]),s._v(" "),e("div",{staticClass:"language-Dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 基础镜像")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node:12.18.1")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定工作目录，后续所有的操作都在这个目录下进行")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将项目代码拷贝到工作目录")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . .")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行npm install安装所有依赖")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm install")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当镜像的container运行时执行这个命令，这样我们的服务就启动了。")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 区别于RUN命令，RUN命令实在生成image时执行的")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" [ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"node"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"server.js"')]),s._v(" ]")]),s._v("\n")])])]),e("h4",{attrs:{id:"创建-dockerignore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建-dockerignore"}},[s._v("#")]),s._v(" 创建.dockerignore")]),s._v(" "),e("p",[s._v("在执行COPY命令的时候我们不希望将node_modules，.git文件拷贝到镜像中来，我们可以创建.dockerignore 将这两个文件加进去。")]),s._v(" "),e("div",{staticClass:"language-file extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(".git\nnode_modules\n")])])]),e("h4",{attrs:{id:"构建镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[s._v("#")]),s._v(" 构建镜像")]),s._v(" "),e("p",[s._v("现在所有的准备工作都做好了，我们可以开始构建镜像了。")]),s._v(" "),e("p",[s._v("执行命令：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("docker build --tag node-docker "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),e("p",[s._v("执行这个命令Docker会读取Dockerfile里面的指令并逐个执行它们，最终创建一个Docker映像。")]),s._v(" "),e("h4",{attrs:{id:"运行container"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行container"}},[s._v("#")]),s._v(" 运行container")]),s._v(" "),e("p",[s._v("构建好image后我们就可以运行containr了，\n执行命令：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("docker run -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v(":8000 node-docker\n")])])]),e("ul",[e("li",[s._v("-d 是--detach的缩写，表示在后台运行container不会占用命令行")]),s._v(" "),e("li",[s._v("-p 是--publish缩写，将容器里面的端口暴露给宿主机，[host port]:[container port]")])]),s._v(" "),e("p",[s._v("执行完这个命令后container已经运行起来了，我们可以用上面的POST和GET请求进行验证。\n因为container在后台运行，我们没法直接看到日志打出，可以使用命令  "),e("code",[s._v("docker logs [containerId]")]),s._v(" 进行查看。")]),s._v(" "),e("h4",{attrs:{id:"更新应用操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新应用操作"}},[s._v("#")]),s._v(" 更新应用操作")]),s._v(" "),e("p",[s._v("现在我们在server.js加入一行log")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"this is a new image"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n")])])]),e("p",[s._v("那么本次改动如何更新到镜像和container中呢？")]),s._v(" "),e("p",[s._v("执行以下步骤：")]),s._v(" "),e("ul",[e("li",[s._v("重新build image，"),e("code",[s._v("docker build --tag node-docker .")])]),s._v(" "),e("li",[s._v("删除之前的container，"),e("code",[s._v("docker rm -f [containerId]")])]),s._v(" "),e("li",[s._v("重新运行container，"),e("code",[s._v("docker run -dp 8000:8000 node-docker")])])]),s._v(" "),e("h4",{attrs:{id:"共享image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#共享image"}},[s._v("#")]),s._v(" 共享image")]),s._v(" "),e("p",[s._v("镜像构建好了，我们可以发布到远程仓库中以供他人下载和使用。")]),s._v(" "),e("p",[s._v("这里我们使用Docker Hub来共享我们image操作步骤如下：")]),s._v(" "),e("ul",[e("li",[s._v("首先我们需要"),e("a",{attrs:{href:"https://www.docker.com/pricing?utm_source=docker&utm_medium=webreferral&utm_campaign=docs_driven_upgrade",target:"_blank",rel:"noopener noreferrer"}},[s._v("注册"),e("OutboundLink")],1),s._v("和登录Docker Hub；")]),s._v(" "),e("li",[s._v("点击 “Create Repository”按钮创建一个自己的仓库，取名就叫node-server，创建成功后得到新的镜像名字，[YOUR-USER-NAME]/node-server；")]),s._v(" "),e("li",[s._v("我们需要在本地登录Docker Hub，"),e("code",[s._v("docker login -u YOUR-USER-NAME")]),s._v("；")]),s._v(" "),e("li",[s._v("我们需要给镜像重新取一个跟远程一样的名字，"),e("code",[s._v("docker tag node-serve YOUR-USER-NAME/node-server")]),s._v(" 这里不会创建新的镜像，执行"),e("code",[s._v("docker images")]),s._v("命令可以看到"),e("code",[s._v("IMAGE ID")]),s._v("是相同的；")]),s._v(" "),e("li",[s._v("现在我们可以将镜像推送到远程了，执行命令"),e("code",[s._v("docker push YOUR-USER-NAME/node-server")]),s._v(", 执行完命令刷新Docker Hub页面就可以看到刚刚的推送了。")])]),s._v(" "),e("p",[s._v("至此别人也可以拉取我们构建好的镜像并运行了。")]),s._v(" "),e("p",[s._v("感兴趣的同学可以去"),e("a",{attrs:{href:"https://labs.play-with-docker.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Play with Docker"),e("OutboundLink")],1),s._v("拉取并运行刚才发布的镜像。")]),s._v(" "),e("h4",{attrs:{id:"数据持久化-volume"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据持久化-volume"}},[s._v("#")]),s._v(" 数据持久化（volume）")]),s._v(" "),e("p",[s._v("在上面的demo中，我们用post请求存储的数据存储在container里面的文件系统中。\n前文也讲过docker container拥有自己独立的文件系统并且与外界隔离，container可以完成文件的增删改查操作。\n当container被删除后，container里面的数据也会被一并删除。\n那么docker里面怎么做数据的持久化存储呢。\n这里就引入了volume（数据卷）的概念。")]),s._v(" "),e("p",[s._v("volume可以将container中的文件路径挂载到宿主机的某个路径上面，\n那么container中那个路径下的所有改动都会映射到宿主机上对应的路径中，\n它的生命周期独立于容器，\nvolume不会在容器被删除后自动删除。")]),s._v(" "),e("p",[s._v("volume 主要分为两种:")]),s._v(" "),e("h5",{attrs:{id:"_1-bind-mounts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-bind-mounts"}},[s._v("#")]),s._v(" 1. bind mounts")]),s._v(" "),e("p",[s._v("使用bind mounts volume我们需要自己指定挂载目录。\nbind mounts volume可以用来做数据存储，不过通常用来给container提供额外的数据，\n比如将项目的源代码挂载到container里面，\n修改源代码就可以同步到container里面。")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("docker run -dp "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v(":8000 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n     -w /app -v "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(':/app"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n     node:12-alpine "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" -c "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm i nodemon -g && npm i && nodemon server.js"')]),s._v("\n")])])]),e("p",[s._v("这样在开发完后我们就可以重新打包我们的镜像了，相当的方便.")]),s._v(" "),e("h5",{attrs:{id:"_2-named-volume"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-named-volume"}},[s._v("#")]),s._v(" 2. named volume")]),s._v(" "),e("p",[s._v("named volume适用于数据存储，我们不用关心数据的存储位置。\n创建好named volume后，我们只需要使用volumeName用作挂载，\nDocker会自动给volume分配存储路径。")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建named volume ")]),s._v("\n$ docker volume create "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("volumeName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v(" docker run  -v "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("volumeName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(":/etc/todos "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("imageName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),e("p",[s._v("那我们怎么查看named volume在宿主机上的挂载路径呢，很简单使用命令：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("docker volume inspect "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("volumeName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),e("h4",{attrs:{id:"container-之间如何通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#container-之间如何通信"}},[s._v("#")]),s._v(" container 之间如何通信")]),s._v(" "),e("p",[s._v("目前为止我们只有一个container在运行，但是在实际使用中服务往往不止一个，比如数据库服务、api服务等，")]),s._v(" "),e("p",[s._v("为了方便管理和维护，我们将服务分到不同的container中运行，力求让每个container只做好一件事情。")]),s._v(" "),e("p",[s._v("container之间往往需要相互通信，例如api服务与数据库服务之间需要进行增删改查的通信，那么container直接如何通信呢？")]),s._v(" "),e("p",[s._v("这里就要用到docker network了。")]),s._v(" "),e("p",[s._v("创建network非常简单:")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker network create "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("networkName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),e("p",[s._v("在同一个局域网中，container之间可以通过networking进行通信。")]),s._v(" "),e("h4",{attrs:{id:"使用volume和network改造我们的应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用volume和network改造我们的应用"}},[s._v("#")]),s._v(" 使用volume和network改造我们的应用")]),s._v(" "),e("p",[s._v("这里我们综合使用volume和networking来改造我们的应用。\n我们引入数据库（mongodb）用来存储我们的数据，我们将运行一个mongodb的container。")]),s._v(" "),e("p",[s._v("首先创建两个volume用来存储mongodb的数据和配置")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker volume create mongodb\n$ docker volume create mongodb_config\n")])])]),e("p",[s._v("创建一个network用于server和mongodb进行通讯。")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker network create mongodb\n")])])]),e("p",[s._v("好了现在我们可以运行我们的mongodb镜像了，这里我们直接从Docker Hub上拉取\nmongodb镜像，将我们创建好的volume挂载上去，同时将mongodb接入到我们创建的network中。")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker run --rm -d -v mongodb:/data/db "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  -v mongodb_config:/data/configdb -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("27017")]),s._v(":27017 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --network mongodb "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --name mongodb "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  mongo\n")])])]),e("p",[s._v("修改我们的server.js代码，使其连接到mongodb服务。")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" ronin     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ronin-server'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" mocks     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ronin-mocks'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" database  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ronin-database'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" server "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ronin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("server")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\ndatabase"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("connect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("env"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CONNECTIONSTRING")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("use")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mocks"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("server")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("Router")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("p",[s._v("这里引入了ronin-database需要安装")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" ronin-database\n")])])]),e("p",[s._v("现在重新编译我们镜像：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker build --tag node-docker "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),e("p",[s._v("镜像编译完成就可以运行我们的container了")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker run "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --rm -d "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --network mongodb "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --name rest-server "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v(":8000 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("CONNECTIONSTRING")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mongodb://mongodb:27017/db_notes "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  node-docker\n")])])]),e("p",[s._v("我们将node-docker container接入到相同的网络mongodb中，这样node-docker就可以和mongodb相互通信了。\n这里注入环境变量CONNECTIONSTRING，server.js连接数据库需要用到。")]),s._v(" "),e("p",[s._v("现在让我们来测试一下：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" --request POST "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --url http://localhost:8000/notes "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --header "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'content-type: application/json'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --data "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'{\n"name": "this is a note",\n"text": "this is a note that I wanted to take while I was working on writing a blog post.",\n"owner": "peter"\n}\'')]),s._v("\n")])])]),e("p",[s._v("获取一下我们刚才存储的数据")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" --request GET --url http://localhost:8000/notes\n")])])]),e("p",[s._v("大功告成。后面就算将mongodb的container删除，只要在启动的时候将volume挂载上去，数据还是一直存在的。")]),s._v(" "),e("h2",{attrs:{id:"使用docker-compose-打包你的应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用docker-compose-打包你的应用"}},[s._v("#")]),s._v(" 使用docker compose 打包你的应用")]),s._v(" "),e("p",[s._v("到目前为止我们已经了解了docker的基本概念，学会了如何使用docker。")]),s._v(" "),e("p",[s._v("但是我们也发现了，整个过程还是比较繁琐的，我们需要创建network，创建volume，启动container，注入环境变量等等操作。")]),s._v(" "),e("p",[s._v("有没有办法一行命令搞定所有这些事情呢？答案是肯定的。现在我们就来介绍docker compose的使用让我们一次搞定。")]),s._v(" "),e("p",[s._v("docker compose需要安装。这里我们省略安装步骤，大家自行google。")]),s._v(" "),e("ol",[e("li",[s._v("在项目的根目录下创建docker-compose.yml文件")]),s._v(" "),e("li",[s._v("写入相关命令")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("version: '3.3'\n\nservices:\n notes:\n  build:\n   context: .\n  ports:\n   - 8000:8000\n  environment:\n   - SERVER_PORT=8000\n   - CONNECTIONSTRING=mongodb://mongo:27017/notes\n  working_dir: /app\n  volumes:\n   - ./:/app\n  command: npm run start\n\n mongo:\n  image: mongo:4.2.8\n  ports:\n   - 27017:27017\n  volumes:\n   - mongodb:/data/db\n   - mongodb_config:/data/configdb\nvolumes:\n mongodb:\n mongodb_config:\n")])])]),e("p",[s._v("定义好docker-compose.yml文件文件以后使用命令：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("docker-compose up -d\n")])])]),e("p",[s._v("查看日志")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("docker-compose logs -f\n")])])]),e("p",[s._v("查看某个日志")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("docker-compose logs -f app\n")])])]),e("p",[s._v("停止")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("docker-compose down\n")])])]),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),e("p",[s._v("最后我们来总结一下Docker的特点：")]),s._v(" "),e("ul",[e("li",[s._v("高效利用系统资源\n由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。")]),s._v(" "),e("li",[s._v("启动时间短\nDocker运行于宿主机内核之中，相较于虚拟机无需启动完整的操作系统，启动时间往往是秒甚至毫秒级别。")]),s._v(" "),e("li",[s._v("保证了运行环境的一致性\nDokcer将服务所需的依赖都打包进image中，保证了在不同机器上运行环境的一致性，不会出现因为运行环境不一致导致的bug")]),s._v(" "),e("li",[s._v("方便迁移\n由于Dokcer保证了运行环境的一致性，不同平台运行Docker得出的结果都是一致的，这样用户就可以很轻易的将一个平台上运行的应用，迁移到另一个平台上。")])]),s._v(" "),e("p",[s._v("对于普通的应用docker + docker compose完全可以应付。")]),s._v(" "),e("p",[s._v("面临的问题：")]),s._v(" "),e("p",[s._v("随着容器数量的不断增长")]),s._v(" "),e("ul",[e("li",[s._v("如何协调和调度这些容器？")]),s._v(" "),e("li",[s._v("如何在版本更新的时候不中断服务？")]),s._v(" "),e("li",[s._v("如何监视应用程序的运行情况？")]),s._v(" "),e("li",[s._v("如何批量操作容器？")])]),s._v(" "),e("p",[s._v("随着这些问题的出现，演变出了容器编排技术，Kubernetes（k8s）、Docker Swarm等，用来管理容器")]),s._v(" "),e("h2",{attrs:{id:"docker-常用命令总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-常用命令总结"}},[s._v("#")]),s._v(" Docker 常用命令总结")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有运行中的container")]),s._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有container")]),s._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -a\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止所有容器")]),s._v("\n$ docker stop "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -aq"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除所有容器")]),s._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -aq"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除所有镜像")]),s._v("\n$ docker rmi "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker images -q"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);