(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{467:function(t,s,e){t.exports=e.p+"assets/img/input.15684d6c.png"},468:function(t,s,e){t.exports=e.p+"assets/img/composit.34b400f4.gif"},469:function(t,s,e){t.exports=e.p+"assets/img/nfsr1.6fda6b73.png"},470:function(t,s,e){t.exports=e.p+"assets/img/nfsr2.f2e60c76.png"},471:function(t,s,e){t.exports=e.p+"assets/img/hittest.0eb15979.png"},472:function(t,s,e){t.exports=e.p+"assets/img/rawevents.8ce4d80e.png"},473:function(t,s,e){t.exports=e.p+"assets/img/coalescedevents.58a0f133.png"},474:function(t,s,e){t.exports=e.p+"assets/img/getCoalescedEvents.e1563a5a.png"},551:function(t,s,e){"use strict";e.r(s);var a=e(14),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_4、到达合成线程的输入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、到达合成线程的输入"}},[t._v("#")]),t._v(" 4、到达合成线程的输入")]),t._v(" "),a("page-tags",{attrs:{text:"发布于：2021-07-18"}}),t._v(" "),a("p",[t._v("在前面的篇章中我们探索了浏览器如何将我们的代码渲染成页面，我们了解了渲染进程和合成器。在本篇中我们将探索合成器是如何流畅地响应用户输入的。")]),t._v(" "),a("h2",{attrs:{id:"从浏览器的角度来看输入事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从浏览器的角度来看输入事件"}},[t._v("#")]),t._v(" 从浏览器的角度来看输入事件")]),t._v(" "),a("p",[t._v("一般我们认为的输入事件只有输入框输入或者鼠标点击事件，但是从浏览器的角度来看任何手势操作都是输入。鼠标滚动、触摸操作、鼠标悬停这些对浏览器来说都是输入事件。")]),t._v(" "),a("p",[t._v("当用户触摸屏幕时，浏览器进程是最先收到这个手势事件的。但是浏览器进程仅仅是知道事件是在哪里发生的，并不能直接响应用户的操作，因为"),a("code",[t._v("tab")]),t._v("里面的内容都是由渲染进程来处理的。所以浏览器进程会将事件类型（比如"),a("code",[t._v("touchstart")]),t._v("）和事件发生的位置坐标发送给渲染进程。渲染进程收到事件后会去找到对应的事件对象然后执行相应的事件监听器。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(467),alt:"input.png"}}),t._v(" "),a("center",{staticStyle:{"font-size":"14px","text-decoration":"underline"}},[t._v("通过浏览器进程传递到渲染进程的输入事件")])],1),t._v(" "),a("h2",{attrs:{id:"合成器收到输入事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合成器收到输入事件"}},[t._v("#")]),t._v(" 合成器收到输入事件")]),t._v(" "),a("p",[a("img",{attrs:{src:e(468),alt:"composit.gif"}}),t._v(" "),a("center",{staticStyle:{"font-size":"14px","text-decoration":"underline"}},[t._v("视口悬停在页面图层上")])],1),t._v(" "),a("p",[t._v("在前面的篇章中，我们讨论过合成器是如何通过合成栅格化图层来平滑的处理滚动的。如果当前页面没有事件监听绑定，合成线程会创建一个新的完全独立于主线程的合成帧。但是如果页面中绑定了事件监听呢？合成器线程如何得知事件是否需要处理呢？")]),t._v(" "),a("h2",{attrs:{id:"了解非快速滚动区域-non-fast-scrollable-region"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解非快速滚动区域-non-fast-scrollable-region"}},[t._v("#")]),t._v(" 了解非快速滚动区域（non-fast scrollable region）")]),t._v(" "),a("p",[t._v("由于运行"),a("code",[t._v("js")]),t._v('代码是主线程的任务，当页面合成时合成线程会将页面中绑定了事件监听的部分标记为“非快速滚动区域”（````"Non-Fast Scrollable Region"```）。当这个区域中的事件触发时，通过这个标记合成线程可以确保将输入事件发送给主线程。如果输入事件来自于这个区域之外，合成线程会继续合成新的帧，而不会等待主线程。')]),t._v(" "),a("p",[a("img",{attrs:{src:e(469),alt:"nfsr1.png"}}),t._v(" "),a("center",{staticStyle:{"font-size":"14px","text-decoration":"underline"}},[t._v("来自非快速滚动区域的输入事件")])],1),t._v(" "),a("h3",{attrs:{id:"写事件监听的注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写事件监听的注意事项"}},[t._v("#")]),t._v(" 写事件监听的注意事项")]),t._v(" "),a("p",[t._v("在写事件监听时我们经常会用到事件委托。基于事件冒泡机制我们可以在顶层元素上监听事件。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'touchstart'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" area"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preventDefault")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这样的好处是，当有多个元素需要绑定相同的事件时，不需要单独的为每个元素都绑定事件。但是从浏览器的角度来讲这样做可能会导致不必要的区域也会被标记为非快速滚动区域。如果我们不关心页面其他区域的输入事件，但是当这些区域发生事件时合成线程还是不得不等待主线程处理完这些事件才能继续干活。因此合成器提供流畅用户体验的能力就大打折扣了。\n"),a("img",{attrs:{src:e(470),alt:"nfsr2.png"}}),t._v(" "),a("center",{staticStyle:{"font-size":"14px","text-decoration":"underline"}},[t._v("整个区域都是非快速滚动的区域")])],1),t._v(" "),a("p",[t._v("你可以通过"),a("code",[t._v("passive: true")]),t._v("参数告诉浏览器，当事件发生时主线程继续监听处理事件，合成线程不再等待并继续合成新的帧。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'touchstart'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" area"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preventDefault")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("passive"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"查找事件对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找事件对象"}},[t._v("#")]),t._v(" 查找事件对象")]),t._v(" "),a("p",[a("img",{attrs:{src:e(471),alt:"hittest.png"}}),t._v(" "),a("center",{staticStyle:{"font-size":"14px","text-decoration":"underline"}},[t._v("主线程查看绘制记录，询问x,y坐标点上绘制了什么")])],1),t._v(" "),a("p",[t._v("当合成器线程向主线程发送输入事件时，首先要运行的是命中测试来找到事件目标。命中测试使用渲染过程中生成的绘制记录数据来找出发生事件的坐标对应的内容。")]),t._v(" "),a("h2",{attrs:{id:"缩减发送都主线程的事件数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缩减发送都主线程的事件数"}},[t._v("#")]),t._v(" 缩减发送都主线程的事件数")]),t._v(" "),a("p",[t._v("我们知道设备刷新频率通常是在"),a("code",[t._v("60次/s")]),t._v("，页面的渲染频率跟这个频率保持一致我们可以得到顺畅的动画效果。但是对于输入事件，通常的触摸屏设备每秒传递"),a("code",[t._v("60-120")]),t._v(" 次触摸事件，鼠标每秒传递 "),a("code",[t._v("100次")]),t._v("事件，输入事件的传递频次是高于设备的刷新频率的。")]),t._v(" "),a("p",[t._v("如果一个连续的事件比如"),a("code",[t._v("touchmove")]),t._v("以每秒"),a("code",[t._v("120次")]),t._v("的频率发送给主线程，那么与屏幕的刷新速度比，它可能会触发过多的命中测试和 "),a("code",[t._v("JavaScript")]),t._v(" 执行。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(472),alt:"rawevents.png"}}),t._v(" "),a("center",{staticStyle:{"font-size":"14px","text-decoration":"underline"}},[t._v("过多触发事件导致页面卡顿")])],1),t._v(" "),a("p",[t._v("为了减少过量的主线程调用，Chrome将连续事件（例如："),a("code",[t._v("wheel")]),t._v("，"),a("code",[t._v("mousewheeel")]),t._v(","),a("code",[t._v("mousemove")]),t._v(","),a("code",[t._v("pointermove")]),t._v(","),a("code",[t._v("touchmove")]),t._v("）并将调度延迟到下一个 "),a("code",[t._v("requestAnimationFrame")]),t._v(" 之前。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(473),alt:"coalescedevents.png"}}),t._v(" "),a("center",{staticStyle:{"font-size":"14px","text-decoration":"underline"}},[t._v("合并并且延迟发送")])],1),t._v(" "),a("p",[t._v("非连续性的事件比如 "),a("code",[t._v("keydown")]),t._v(", "),a("code",[t._v("keyup")]),t._v(", "),a("code",[t._v("mouseup")]),t._v(", "),a("code",[t._v("mousedown")]),t._v(", "),a("code",[t._v("touchstart")]),t._v(", 和  "),a("code",[t._v("touchend")]),t._v("，这些事件都是立即发送。")]),t._v(" "),a("h2",{attrs:{id:"使用-getcoalescedevents-获取帧内事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-getcoalescedevents-获取帧内事件"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("getCoalescedEvents")]),t._v(" 获取帧内事件")]),t._v(" "),a("p",[t._v("对于大多数应用来说，合成事件就足够用来提供良好的用户体验了。但是如果是开发绘图应用，需要基于 "),a("code",[t._v("touchmove")]),t._v(" 坐标放置路径之类的功能，如果使用合成事件就可能会丢失中间的某些坐标，难以画出平滑的曲线。在这种情况下可以在"),a("code",[t._v("pointer")]),t._v("事件中使用 "),a("code",[t._v("getCoalescedEvents")]),t._v(" 方法来获取有关这些合并事件的信息。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(474),alt:"getCoalescedEvents.png"}}),t._v(" "),a("center",{staticStyle:{"font-size":"14px","text-decoration":"underline"}},[t._v("左边是使用后的效果，右边是使用前的效果")])],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pointermove'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" events "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCoalescedEvents")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" event "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pageX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pageY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// draw a line using x and y coordinates.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"番外"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#番外"}},[t._v("#")]),t._v(" 番外")]),t._v(" "),a("h3",{attrs:{id:"使用-lighthouse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-lighthouse"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("Lighthouse")])]),t._v(" "),a("p",[t._v("使用"),a("a",{attrs:{href:"https://developers.google.com/web/tools/lighthouse",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lighthouse"),a("OutboundLink")],1),t._v("工具。"),a("code",[t._v("Lighthouse")]),t._v("可以评估你的网站，分析出哪些地方做得好哪些地方需要改进，分析完成后以报告的形式给出。结合报告可以做一些针对性的优化操作。")]),t._v(" "),a("h3",{attrs:{id:"评估网站性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#评估网站性能"}},[t._v("#")]),t._v(" 评估网站性能")]),t._v(" "),a("p",[t._v("不同的网站需要不同的优化策略。所以要学会评估网站的性能瓶颈找出需要优化的点。可以参考"),a("a",{attrs:{href:"https://developers.google.com/web/tools/chrome-devtools/speed/get-started",target:"_blank",rel:"noopener noreferrer"}},[t._v("how to measure your site's performance"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"添加功能策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加功能策略"}},[t._v("#")]),t._v(" 添加功能策略")]),t._v(" "),a("p",[t._v("更进一步，可以了解一下"),a("code",[t._v("Feature Policy")]),t._v("这个新的"),a("code",[t._v("Web")]),t._v("平台功能，这个功能可以在你构建项目的时候提供一些保护让你的应用具有某些行为并防止你犯下错误。例如，如果你想确保你的应用代码不会阻塞页面的解析，你可以在同步脚本策略中运行你的应用。具体做法是将"),a("code",[t._v("sync-script")]),t._v("设置为"),a("code",[t._v("'none'")]),t._v("，这样那些会阻塞页面解析的"),a("code",[t._v("JavaScript")]),t._v("代码会被禁止执行。这样做的好处是避免你的代码阻塞页面的解析，而且浏览器无须担心解析器（"),a("code",[t._v("parser")]),t._v("）暂停。")]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developers.google.com/web/updates/2018/09/inside-browser-part4",target:"_blank",rel:"noopener noreferrer"}},[t._v("inside-browser-part4"),a("OutboundLink")],1)])],1)}),[],!1,null,null,null);s.default=n.exports}}]);